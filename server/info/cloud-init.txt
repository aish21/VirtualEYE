#!/bin/bash
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install -y docker-ce

# Linux post-install
sudo groupadd docker
sudo usermod -aG docker $USER
sudo systemctl enable docker

"customData": "#!/bin/bash \
                                sudo apt-get install -y \ \
                                apt-transport-https \ \
                                ca-certificates \ \
                                curl \ \
                                software-properties-common \
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \
                                sudo apt-key fingerprint 0EBFCD88 \
                                sudo add-apt-repository \ \
                                \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \ \
                                $(lsb_release -cs) \ \
                                stable\" \
                                sudo apt-get update \
                                sudo apt-get install -y docker-ce \
                                sudo groupadd docker \
                                sudo usermod -aG docker $USER \
                                sudo systemctl enable docker"


'''
Test Script for Azure VM creation during runtime
'''

import adal
import requests
import json

# Tenant ID for your Azure Subscription
TENANT_ID = '5ef97fc2-9f71-4435-a705-3c9ee58a52f8'

# Your Service Principal App ID
CLIENT = '17b8c581-f781-42d4-8c30-c0dbdd86d166'

# Your Service Principal Password
KEY = 'QsO8Q~eo7vlb_qtB33jETqAs8f1X5oBj6w8-Ocjj'


subscription_id = '9568b8d1-2087-47d1-b8ed-0baa6969f187'

authority_url = 'https://login.microsoftonline.com/'+TENANT_ID
context = adal.AuthenticationContext(authority_url)
token = context.acquire_token_with_client_credentials(
    resource='https://management.azure.com/',
    client_id=CLIENT,
    client_secret=KEY
)

print(token["accessToken"])

authStr = "bearer " + token["accessToken"]

headers  = {"Authorization": authStr,
            "Content-Type": "application/json"}

# # Create NSG
# # PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityGroups/{networkSecurityGroupName}?api-version=2022-01-01

# nsgData = {
#     "properties": {
#         "securityRules": [
#             {
#                 "name": "SSH",
#                 "properties": {
#                     "protocol": "TCP",
#                     "sourcePortRange": "*",
#                     "destinationPortRange": "22",
#                     "sourceAddressPrefix": "*",
#                     "destinationAddressPrefix": "*",
#                     "access": "Allow",
#                     "priority": 300,
#                     "direction": "Inbound",
#                     "sourcePortRanges": [],
#                     "destinationPortRanges": [],
#                     "sourceAddressPrefixes": [],
#                     "destinationAddressPrefixes": []
#                 }
#             },
#             {
#                 "name": "HTTP",
#                 "properties": {
#                     "protocol": "TCP",
#                     "sourcePortRange": "*",
#                     "destinationPortRange": "80",
#                     "sourceAddressPrefix": "*",
#                     "destinationAddressPrefix": "*",
#                     "access": "Allow",
#                     "priority": 320,
#                     "direction": "Inbound",
#                     "sourcePortRanges": [],
#                     "destinationPortRanges": [],
#                     "sourceAddressPrefixes": [],
#                     "destinationAddressPrefixes": []
#                 }
#             },
#             {
#                 "name": "HTTPS",
#                 "properties": {
#                     "protocol": "TCP",
#                     "sourcePortRange": "*",
#                     "destinationPortRange": "443",
#                     "sourceAddressPrefix": "*",
#                     "destinationAddressPrefix": "*",
#                     "access": "Allow",
#                     "priority": 340,
#                     "direction": "Inbound",
#                     "sourcePortRanges": [],
#                     "destinationPortRanges": [],
#                     "sourceAddressPrefixes": [],
#                     "destinationAddressPrefixes": []
#                 }
#             },
#             {
#                 "name": "Websocket",
#                 "properties": {
#                     "protocol": "*",
#                     "sourcePortRange": "*",
#                     "destinationPortRange": "9090",
#                     "sourceAddressPrefix": "*",
#                     "destinationAddressPrefix": "*",
#                     "access": "Allow",
#                     "priority": 200,
#                     "direction": "Inbound",
#                     "sourcePortRanges": [],
#                     "destinationPortRanges": [],
#                     "sourceAddressPrefixes": [],
#                     "destinationAddressPrefixes": []
#                 }
#             },
#             {
#                 "name": "listening_port",
#                 "properties": {
#                     "protocol": "*",
#                     "sourcePortRange": "*",
#                     "destinationPortRange": "80",
#                     "sourceAddressPrefix": "*",
#                     "destinationAddressPrefix": "*",
#                     "access": "Allow",
#                     "priority": 100,
#                     "direction": "Inbound",
#                     "sourcePortRanges": [],
#                     "destinationPortRanges": [],
#                     "sourceAddressPrefixes": [],
#                     "destinationAddressPrefixes": []
#                 }
#             }
#         ]
#     },
#     "location": "centralindia"
# }

# nsgData = json.dumps(nsgData)
# resp = requests.put("https://management.azure.com/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/networkSecurityGroups/VPShost3-nsg?api-version=2022-01-01", headers= headers, data=nsgData)
# print(resp.content)


# # Create Public IP
# # PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPAddresses/{publicIpAddressName}?api-version=2022-01-01

# ipData = {
#     "properties": {
#         "publicIPAllocationMethod": "Static",
#         "idleTimeoutInMinutes": 4,
#         "publicIPAddressVersion": "IPv4"
#     },
#     "sku": {
#         "name": "Basic",
#         "tier": "Regional"
#     },
#     "location": "centralindia"
# }

# ipData = json.dumps(ipData)
# resp = requests.put("https://management.azure.com/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/publicIPAddresses/VPShost3-ip?api-version=2022-01-01", headers= headers, data=ipData)
# print(resp.content)


# # Create NIC
# # PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkInterfaces/{networkInterfaceName}?api-version=2022-01-01

# nicData = {
#   "properties": {
#     "enableAcceleratedNetworking": True,
#     "enableIPForwarding": False,
#     "networkSecurityGroup": {
#         "id": "/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/networkSecurityGroups/VPShost3-nsg"
#     },
#     "ipConfigurations": [
#       {
#         "name": "ipconfig1",
#         "properties": {
#           "publicIPAddress": {
#             "id": "/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/publicIPAddresses/VPShost3-ip"
#           },
#           "subnet": {
#             "id": "/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/virtualNetworks/VPS-Server-vnet/subnets/default"
#           }
#         }
#       }
#     ]
#   },
#   "location": "centralindia"
# }

# nicData = json.dumps(nicData)
# resp = requests.put("https://management.azure.com/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/networkInterfaces/VPShost3-NIC?api-version=2022-01-01", headers= headers, data=nicData)
# print(resp.content)


# Create VM
# PUT https://management.azure.com/subscriptions/{subscription-id}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}?api-version=2017-12-01

vmData = {
    "resources": [
        {
            "location": "centralindia",
            "name": "VPShost3",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_D2s_v3"
                },
                "storageProfile": {
                    "imageReference": {
                        "sku": "20_04-lts-gen2",
                        "publisher": "canonical",
                        "version": "latest",
                        "offer": "0001-com-ubuntu-server-focal"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        },
                        "name": "VPShost3-OSDisk",
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerName": "VPShost3",
                    "adminUsername": "ip3d",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": True,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "/home/ip3d/.ssh/authorized_keys",
                                    "keyData": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDBDkAuFj8Kzh7mVUuFxvcOTLzK3VO8V9BLszOibw4uIuhQ0KEtTrhBb/hI0MJF/1FRrCrMIsjsIsBHuCG5ChVIeYF3BUfeOUql7sBPxjV8CxIKPChgVoOjzt04VmdiVOVBXwUifW3lfaSwTE2F9fQtrc+zFCv7X0rttXibkdf0o6GsTXhN8OSKmWqC1yb2YI6D8AFzKcNkLmKAIcSgYVW2gjcpN3KGWAvYq5Ng87uWAicWJ1KF5Wn7wPAmz3Qlv5sj6Ko6R2PoxJ822nLr7sZRmXqE6XZaQZ/hnJG9x886jJtcoSYr0ApXQcIsDQoV3P089u8XzLpoxVDBMahe5+uFNm35Gqo6nWD1ygI6x4+8HqupQJMwXRLu8QVGyBYhq8lZnv92BvcZCpanFN1wqbyXlLg70PfVBwfVFUGffzbcH7tWBnf+udpfjZNpBKzKDcZpEF1rz4dPfU0McqoRVb0EE7bMKFzMurgg4byiuFnO6uxW89AcuFLFLqCfuE7kak0= generated-by-azure"
                                }
                            ]
                        }
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Network/networkInterfaces/VPShost3-NIC",
                            "properties": {
                                "primary": True
                            }
                        }
                    ]
                }
            }
        }
    ]
}


vmData = json.dumps(vmData)
resp = requests.put("https://management.azure.com/subscriptions/9568b8d1-2087-47d1-b8ed-0baa6969f187/resourceGroups/VPS-Server/providers/Microsoft.Compute/virtualMachines/VPShost3?api-version=2017-12-01", headers= headers, data=vmData)
print(resp.content)